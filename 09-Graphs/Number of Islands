class Solution {
private:
void bfs(int i,int j,vector<vector<char>>& grid,vector<vector<int>>& visited){
    visited[i][j]=1;
    int n = grid.size();
    int m = grid[0].size();
    queue<pair<int,int>> q;
    q.push({i,j});
    int del_row[] = {-1,0,+1,0};
    int del_col[] = {0,+1,0,-1};
    while(!q.empty()){
        int row = q.front().first;
        int col = q.front().second;
        q.pop();
        for(int i = 0;i<4;i++){
            int nr = row+del_row[i];
            int nc = col+del_col[i];
            if(nr>=0 && nr<n && nc>=0 && nc<m && !visited[nr][nc] && grid[nr][nc] == '1'){
                visited[nr][nc] = 1;
                q.push({nr,nc});
            }
        }
    }
}
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int cnt = 0;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j] == '1' && visited[i][j] == 0){
                    bfs(i,j,grid,visited);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
