class Solution {
private:
    bool bfs(int node, vector<int> &color, const vector<vector<int>>& graph) {
        queue<int> q;
        q.push(node);
        color[node] = 0;
        while(!q.empty()){
            int curr = q.front();
            q.pop();
            for(int neighbour : graph[curr]) {
                if(color[neighbour] == -1) {
                    color[neighbour] = 1 - color[curr];
                    q.push(neighbour);
                } else if(color[neighbour] == color[curr]) {
                    return false;
                }
            }
        }
        return true;
    }
    
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for(int i = 0; i < n; i++) {
            if(color[i] == -1) {
                if(!bfs(i, color, graph)) {
                    return false;
                }
            }
        }
        return true;
    }
};
