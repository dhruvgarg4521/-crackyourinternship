class Solution {
    private:
    void DFS(int row,int col,vector<vector<int>> &ans,vector<vector<int>> &image,int color,int delta_row[],int delta_col[],int ini)
    {
        ans[row][col] = color;
        int n = image.size();
        int m = image[0].size();
        for(int i =0;i<4;i++)
        {
            int new_row = row + delta_row[i];
            int new_col = col +delta_col[i];
            if(new_row>=0&&new_row<n&&new_col>=0&&new_col<m&&image[new_row][new_col] == ini && ans[new_row][new_col]!=color)
            {
                DFS(new_row,new_col,ans,image,color,delta_row,delta_col,ini);
            }
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        int initial_color = image[sr][sc];
        vector<vector<int>> ans = image;
        int delta_row[] = {-1,0,+1,0};
        int delta_col[] = {0,+1,0,-1};
        DFS(sr,sc,ans,image,color,delta_row,delta_col,initial_color);
        return ans;
    }
};
