class Solution {
public:
    void inorderTraversal(TreeNode* root, vector<TreeNode*>& inorderNodes, vector<int>& inorderVals) {
        if (!root) return;
        inorderTraversal(root->left, inorderNodes, inorderVals);
        inorderNodes.push_back(root);
        inorderVals.push_back(root->val);
        inorderTraversal(root->right, inorderNodes, inorderVals);
    }
    
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> inorderNodes;
        vector<int> inorderVals;
        inorderTraversal(root, inorderNodes, inorderVals);

        int n = inorderVals.size();
        int first = -1, second = -1;
        
        for (int i = 0; i < n - 1; i++) {
            if (inorderVals[i] > inorderVals[i + 1]) {
                if (first == -1) {
                    first = i;
                }
                second = i + 1;
            }
        }

        if (first != -1 && second != -1) {
            swap(inorderNodes[first]->val, inorderNodes[second]->val);
        }
    }
};
