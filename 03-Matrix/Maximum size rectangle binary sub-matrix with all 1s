class Solution {
public:
    vector<int> getNSL(vector<int>& heights, int n) {
        stack<pair<int, int>> st;
        vector<int> nsl(n, -1);
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && st.top().first >= heights[i])
                st.pop();
            if (!st.empty())
                nsl[i] = st.top().second;
            st.push({heights[i], i});
        }
        return nsl;
    }
vector<int> getNSR(vector<int>& heights, int n) {
    stack<pair<int, int>> st;
    vector<int> nsr(n, n);
    for (int i = n - 1; i >= 0; --i) {
        while (!st.empty() && st.top().first >= heights[i])
            st.pop();
        if (!st.empty())
            nsr[i] = st.top().second;
        st.push({heights[i], i});
    }
    return nsr;
}
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> nsl = getNSL(heights, n);
        vector<int> nsr = getNSR(heights, n);
        int maxi = 0;
        for (int i = 0; i < n; ++i) {
            int width = nsr[i] - nsl[i] - 1;
            int rect = width * heights[i];
            maxi = max(maxi, rect);
        }
        return maxi;
    }
};
