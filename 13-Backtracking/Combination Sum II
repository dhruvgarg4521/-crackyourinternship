class Solution {
public:
void subseq(vector<int>& arr, vector<vector<int>>& ans, int i, vector<int>& number, int target, int sum) {
    if (sum == target) {
        ans.push_back(number);
        return;
    }
    if (i == arr.size() || sum > target) {
        return;
    }
    number.push_back(arr[i]);
    subseq(arr, ans, i + 1, number, target, sum + arr[i]);
    number.pop_back();
    while (i + 1 < arr.size() && arr[i] == arr[i + 1]) {
        i++;
    }
    subseq(arr, ans, i + 1, number, target, sum);
}

vector<vector<int>> combinationSum2(vector<int>& arr, int target) {
    vector<vector<int>> ans;
    vector<int> number;
    sort(arr.begin(), arr.end());
    subseq(arr, ans, 0, number, target, 0);
    return ans;
}
};
