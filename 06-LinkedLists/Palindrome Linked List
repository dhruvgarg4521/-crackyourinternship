/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode *reverse(ListNode* head)
{
    ListNode* temp=head;
    stack<int> st;
    while(temp!=NULL)
    {
        st.push(temp->val);
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL)
    {
        temp->val=st.top();
        st.pop();
        temp=temp->next;
    }
    return head;
}
    bool isPalindrome(ListNode* head) {
    ListNode* slow=head;
    ListNode* fast=head;
    while(fast->next!=NULL && fast->next->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    ListNode* newhead=reverse(slow->next);
    ListNode* first=head;
    ListNode* second=newhead;
    while(second!=NULL)
    {
        if(first->val!=second->val)
        {
            reverse(newhead);
            return false;
        }
        first=first->next;
        second=second->next;
    }
    reverse(newhead);
    return true;
    }
};
